# evaluator.py

import os
import sys
import time
import pandas as pd
from typing import List, Tuple, Optional
from openai import OpenAI
from dotenv import load_dotenv

from constants import INPUT_EXCEL_FILENAME, OUTPUT_EXCEL_FILENAME, OUTPUT_EVALUATION_FILENAME


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
API_KEY = os.getenv("BOTHUB_API_KEY")

API_TIMEOUT = 5

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API-–∫–ª—é—á–∞

if not API_KEY:
    print("[CRITICAL] ‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOTHUB_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    print("üëâ –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å—Ç—å —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
    print("   BOTHUB_API_KEY=—Ç–≤–æ–π_—Ä–µ–∞–ª—å–Ω—ã–π_—Ç–æ–∫–µ–Ω_—Å—é–¥–∞")
    sys.exit(1)

if API_KEY == "<your bothub access token>" or API_KEY.strip() == "":
    print("[CRITICAL] ‚ùå BOTHUB_API_KEY —Å–æ–¥–µ—Ä–∂–∏—Ç placeholder –∏–ª–∏ –ø—É—Å—Ç!")
    print("üëâ –ó–∞–º–µ–Ω–∏ '<your bothub access token>' –≤ –∫–æ–¥–µ –∏–ª–∏, –ª—É—á—à–µ, –∑–∞–¥–∞–π –∫–ª—é—á –≤ .env")
    sys.exit(1)

if len(API_KEY) < 10:
    print("[WARNING] ‚ö†Ô∏è BOTHUB_API_KEY –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –∫–ª—é—á –ø–æ–ª–Ω—ã–π.")

print(f"[INFO] ‚úÖ BOTHUB_API_KEY —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω (–ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤: {API_KEY[:5]}...)")



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Bothub
client = OpenAI(
    api_key=API_KEY,
    base_url="https://bothub.chat/api/v2/openai/v1"
)

MODEL_NAME = "deepseek-chat-v3-0324:free"


def load_data() -> List[Tuple[int, str, str]]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –æ—Ç–≤–µ—Ç—ã –º–æ–¥–µ–ª–∏, —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É.

    –°—Ç–æ–ª–±—Ü—ã:
        questions.xlsx: —Å—Ç–æ–ª–±–µ—Ü D ‚Äî —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        answers_v1.xlsx: —Å—Ç–æ–ª–±–µ—Ü "–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏" ‚Äî –æ—Ç–≤–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        List[Tuple[int, str, str]]: [(–Ω–æ–º–µ—Ä, —ç—Ç–∞–ª–æ–Ω, –æ—Ç–≤–µ—Ç_–º–æ–¥–µ–ª–∏), ...]
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (—Å—Ç–æ–ª–±–µ—Ü D = 3-–π –∏–Ω–¥–µ–∫—Å)
        df_questions = pd.read_excel(INPUT_EXCEL_FILENAME, header=0)
        if df_questions.shape[1] < 4:
            raise ValueError("–í questions.xlsx –º–µ–Ω—å—à–µ 4 —Å—Ç–æ–ª–±—Ü–æ–≤. –û–∂–∏–¥–∞–ª—Å—è —Å—Ç–æ–ª–±–µ—Ü D —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏.")
        ground_truths = df_questions.iloc[:, 3].fillna("").astype(str).tolist()  # –°—Ç–æ–ª–±–µ—Ü D (–∏–Ω–¥–µ–∫—Å 3)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–≤–µ—Ç—ã –º–æ–¥–µ–ª–∏
        df_answers = pd.read_excel(OUTPUT_EXCEL_FILENAME, header=0)
        if "–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏" not in df_answers.columns:
            raise ValueError("–í answers_v1.xlsx –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ '–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏'")
        model_answers = df_answers["–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏"].fillna("").astype(str).tolist()

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–ø–∏—Å–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã
        min_len = min(len(ground_truths), len(model_answers))
        if len(ground_truths) != len(model_answers):
            print(f"[WARNING] –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: —ç—Ç–∞–ª–æ–Ω–æ–≤ {len(ground_truths)}, –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ–ª–∏ {len(model_answers)}. –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {min_len} –∑–∞–ø–∏—Å–µ–π.")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π
        data = []
        for i in range(min_len):
            data.append((i + 1, ground_truths[i], model_answers[i]))

        return data

    except FileNotFoundError as e:
        print(f"[ERROR] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        return []
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []


def ask_llm_for_similarity(ground_truth: str, model_answer: str, model: str = MODEL_NAME, max_retries: int = 3) -> Optional[float]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–≤–∞ —Ç–µ–∫—Å—Ç–∞ –≤ LLM –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ü–µ–Ω–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç 0 –¥–æ 1.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        float: –æ—Ü–µ–Ω–∫–∞ –æ—Ç 0.0 –¥–æ 1.0, –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    prompt = (
        f"–í–æ—Ç –¥–≤–∞ —Ç–µ–∫—Å—Ç–∞.\n\n"
        f"–¢–µ–∫—Å—Ç 1 (—ç—Ç–∞–ª–æ–Ω–Ω—ã–π): {ground_truth}\n\n"
        f"–¢–µ–∫—Å—Ç 2 (–æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏): {model_answer}\n\n"
        f"–ù–∞–ø–∏—à–∏ —Å—Ç–µ–ø–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–≤–æ–º—É –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 1, "
        f"–≥–¥–µ 1 ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ —Å–º—ã—Å–ª—É, 0 ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ —Å–º—ã—Å–ª—É. "
        f"–í –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –æ–∫—Ä—É–≥–ª—ë–Ω–Ω–æ–µ –¥–æ –¥–µ—Å—è—Ç—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.7)."
    )

    for attempt in range(1, max_retries + 1):
        try:
            response = client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "user", "content": prompt}
                ],
                timeout=30
            )
            raw_answer = response.choices[0].message.content.strip()

            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —á–∏—Å–ª–æ
            score = float(raw_answer)
            if 0.0 <= score <= 1.0:
                return round(score, 1)
            else:
                print(f"[WARNING] –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ —á–∏—Å–ª–æ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [0,1]: {score}")
                return None

        except ValueError:
            print(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –∫–∞–∫ —á–∏—Å–ª–æ: '{raw_answer}'")
            return None
        except Exception as e:
            print(f"[WARNING] –ü–æ–ø—ã—Ç–∫–∞ {attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if attempt < max_retries:
                time.sleep(2 ** attempt)
            else:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫.")
                return None


def evaluate_answers() -> List[Tuple[int, str, str, float]]:
    """
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–∞–ª–æ–Ω–∞.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        List[Tuple[int, str, str, float]]: [(–Ω–æ–º–µ—Ä, —ç—Ç–∞–ª–æ–Ω, –æ—Ç–≤–µ—Ç, –æ—Ü–µ–Ω–∫–∞), ...]
    """
    data = load_data()
    results = []

    for i, (num, ground_truth, model_answer) in enumerate(data, start=1):
        print(f"[INFO] –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞ {num}...")
        score = ask_llm_for_similarity(ground_truth, model_answer)
        if score is None:
            score = 0.0  # –∏–ª–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å NaN, –Ω–æ –¥–ª—è Excel –ª—É—á—à–µ 0.0
        results.append((num, ground_truth, model_answer, score))

        # –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
        time.sleep(API_TIMEOUT)

    return results


def save_evaluation_results(results: List[Tuple[int, str, str, float]], output_file: str = OUTPUT_EVALUATION_FILENAME) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏ –≤ Excel-—Ñ–∞–π–ª.

    –°—Ç–æ–ª–±—Ü—ã: ‚Ññ, –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏, –û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    """
    try:
        df = pd.DataFrame(results, columns=["‚Ññ", "–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç", "–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏", "–û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"])
        df.to_excel(output_file, index=False, engine="openpyxl")

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∂–∏—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã)
        from openpyxl import load_workbook
        from openpyxl.styles import Font

        wb = load_workbook(output_file)
        ws = wb.active

        # –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        bold_font = Font(bold=True)
        for cell in ws[1]:
            cell.font = bold_font

        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 100)
            ws.column_dimensions[column_letter].width = adjusted_width

        wb.save(output_file)
        print(f"[INFO] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
        return True

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã.
    """
    print("[INFO] –ù–∞—á–∞–ª–æ –æ—Ü–µ–Ω–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–≤–µ—Ç–æ–≤...")
    results = evaluate_answers()
    if results:
        success = save_evaluation_results(results)
        if success:
            print("[INFO] –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
            # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É
            avg_score = sum(r[3] for r in results) / len(results)
            print(f"[INFO] –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {avg_score:.2f}")
        else:
            print("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
    else:
        print("[WARNING] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏.")


if __name__ == "__main__":
    main()